.play_area {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(10vw, 1fr));
    grid-gap: 0.5vw;
}

.card {
    border: 0.25vw solid black;
    border-radius: 1vw;
    padding: 0pt;
    position: relative;
    /* TODO */
    width: 8vw;
    height: 12vw;
    font-size: 12vw; /* 1 letter = height of whole card so we can use % sizes */
    overflow: hidden;
    box-sizing: content-box;
    margin: 0.25vw;
}

.card .back, .card .front {
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    border-radius: 0.5vw;
    position: absolute;
    top: 0pt;
    left: 0pt;
}

.card .back {
    background-color: navy;
}

.card .front {
    background-color: white;
}

.card.facedown .front {
    display: none;
    height: 0pt;
}

.card.facedown .back {
    display: block;
    height: 100%;
}

.card.faceup .front {
    display: block;
    height: 100%;
}

.card.faceup .back {
    display: none;
    height: 0pt;
}

.pile {
    border: 0.125vw solid black;
    border-radius: 1vw;
    padding: 0.6vw;
    margin: 0.5vw;
}

/* In deck display, all cards are stacked directly on top of each other. */
.pile.deck {
    display: grid;
    grid-template-columns: 1 fr;
}

.pile.deck .card { grid-row: 1 / 1; grid-column: 1 / 1; }

/* In stacked display, cards mostly overlap but each card is slightly
 * below the next so that the top bit is revealed.
 */
.pile.stacked {
    display: grid;
    grid-template-columns: 1fr;
    grid-auto-rows: 2vw;
}

.pile.stacked .card:nth-last-child(1) {
    /* We set the last card in a stack to span many rows so that it
     * doesn't overflow past the and of the pile like all of the other
     * cards overflow their rows.
     */
    grid-row: auto / span 6;
}

/* In show_top display, most of the cards are stacked as in the deck
 * mode, but a few at the top are displayed like in stacked.
 */
.pile.show_top {
    display: grid;
    grid-template-columns: 1fr;
    grid-auto-rows: 2vw;
}

/* By default all cards are stacked into row 1 */
.pile.show_top .card { grid-row: 1 / 1; }

/* In show-2, the last card is bumped down to row 2 */
.pile.show_top.show_2 .card:nth-last-child(1) { grid-row: 2 / span 6; }

/* In show-3, two cards are bumped down to rows 2 and 3 */
.pile.show_top.show_3 .card:nth-last-child(2) { grid-row: 2 / span 1; }
.pile.show_top.show_3 .card:nth-last-child(1) { grid-row: 3 / span 6; }

.pile.show_top.show_4 .card:nth-last-child(3) { grid-row: 2 / span 1; }
.pile.show_top.show_4 .card:nth-last-child(2) { grid-row: 3 / span 1; }
.pile.show_top.show_4 .card:nth-last-child(1) { grid-row: 4 / span 6; }

.pile.show_top.show_5 .card:nth-last-child(4) { grid-row: 2 / span 1; }
.pile.show_top.show_5 .card:nth-last-child(3) { grid-row: 3 / span 1; }
.pile.show_top.show_5 .card:nth-last-child(2) { grid-row: 4 / span 1; }
.pile.show_top.show_5 .card:nth-last-child(1) { grid-row: 5 / span 6; }

/* TODO: More generic handling for show_N */
